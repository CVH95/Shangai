'''
Copyright (C) 2018 Xiaofeng Xiong and Poramate Manoonpong

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

'''

'''
Goal: Cyclic patterns generated by SO2-CPG

Application: basic patterns driving six legs of a hexapod robot for tripod gaits

Subtask1: so2 network
Subtask2: coordinate H1 and H2 for a tripod gait
Subtask3: change PATTERNINPUT
Subtask4: online change PATTERNINPUT

'''

from scipy import *

from matplotlib import *
from pylab import *

#Subtask3: change PATTERNINPUT
# Frequency pattern
PATTERNINPUT = 0.02
#PATTERNINPUT = 0.1

def TimeInit(StartTime, Endtime, Frequency):
    Max_range = Endtime
    sample = Max_range * Frequency + 1
    t = linspace(0,Max_range,sample)
    return t
def Tanh(num):
    return ((2.0 / (1.0 + exp(-2.0 * num))) - 1.0 )

def IntraLegCoordination(UnitTime,Sample):

    WeightH1_H1 = 1.4
    WeightH2_H2 = 1.4
    BiasH1 = 0.01
    BiasH2 = 0.01

    Output1 = 0.0
    Output2 = 0.0
    time = zeros(Sample)
    OutbuffF = zeros(Sample)
    OutbuffS = zeros(Sample)
    index = 0

    Reflex = PATTERNINPUT

    for ti in UnitTime:

	#Subtask4: online change PATTERNINPUT
	#Adding an 'if' condition here, using index and Sample, when index > (Sample/2), increase Reflex to 0.10
	# Changing frequency
        if index < (Sample/2.0):
                Reflex=0.10

        # CPG building Paramteres
        WeightH1_H2 = 0.18 + Reflex
        WeightH2_H1 = -0.18 - Reflex
        time[index] = ti

	#Subtask1: so2 network
        activityH1 = WeightH1_H1*Output1 + WeightH1_H2*Output2 + BiasH1
        activityH2 = WeightH2_H2*Output2 + WeightH2_H1*Output1 + BiasH2
        Output1 = Tanh(activityH1)
        Output2 = Tanh(activityH2)
        OutbuffF[index] = Output1
        OutbuffS[index] = Output2
        index =  index + 1
        

    #print index
    return [OutbuffF,OutbuffS,time]

UnitStart = 0.0
UnitEnd = 10.0
UnitFrequency = 10*10
Sample = int((UnitEnd - UnitStart) * UnitFrequency + 1)
#print Sample
UnitTime = TimeInit(UnitStart, UnitEnd, UnitFrequency)
#print UnitTime
NeuronOutput = IntraLegCoordination(UnitTime, Sample)
H1, H2,rt = NeuronOutput

#Subtask2: coordinate H1 and H2 for a tripod gait
# Group legss as gait requires
R1 = L2 = R3 = H1

L1 = R2 = L3 = H2

figure(1)
title('SO2 CPG', fontsize=60, fontweight='bold')
plot(rt, H1,label = 'H1', linewidth=10, color='r', linestyle='dashed')
plot(rt, H2,label = 'H2', linewidth=10, color='b')
xlabel('Time (s)', fontsize=55, fontweight='bold')
tick_params(axis = 'both', which = 'major', labelsize = 55)
ylabel('Outputs', fontsize=55,fontweight='bold', rotation=0)
savefig('so2_1.png')

figure(2)
title('Hexapod robot coordination', fontsize=60, fontweight='bold')
plt.subplot(611)
plt.plot(rt, L1, linewidth=10, color='b')
ylabel('L1', fontsize=35,fontweight='bold', rotation=0)
plt.subplot(612)
plt.plot(rt, L2, linewidth=10, color='r', linestyle='dashed')
ylabel('L2', fontsize=35,fontweight='bold', rotation=0)
plt.subplot(613)
plt.plot(rt, L3, linewidth=10, color='b')
ylabel('L3', fontsize=35,fontweight='bold', rotation=0)
plt.subplot(614)
plt.plot(rt, R1, linewidth=10, color='r', linestyle='dashed')
ylabel('R1', fontsize=35,fontweight='bold', rotation=0)
plt.subplot(615)
plt.plot(rt, R2, linewidth=10, color='b')
ylabel('R2', fontsize=35,fontweight='bold', rotation=0)
plt.subplot(616)
plt.plot(rt, R3, linewidth=10, color='r', linestyle='dashed')
ylabel('R3', fontsize=35,fontweight='bold', rotation=0)
xlabel('Time (s)', fontsize=55, fontweight='bold')
savefig('so2_2.png')

#legend(loc=2, prop={'size': 55})
show()